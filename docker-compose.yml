version: '3.8'

services:

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:15.2
    networks:
      - network
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data/
      - ./full_dump.sql:/docker-entrypoint-initdb.d/full_dump.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 5s
      timeout: 5s
      retries: 5

  auth_postgres:
    container_name: auth_postgres
    hostname: auth_postgres
    image: postgres:15.2
    networks:
      - network
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: auth
    volumes:
      - auth_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d auth" ]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    environment:
      discovery.type: ${DISCOVERY_TYPE}
      xpack.security.enabled: ${XPACK_SECURITY_ENABLED}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - network

  redis:
    container_name: redis
    hostname: redis
    image: redis:7.2-rc1
    environment:
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD}
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - network

  etl:
    container_name: etl
    hostname: etl
    build: etl
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    networks:
      - network
    depends_on:
      - elasticsearch
      - redis
      - postgres

  api:
    container_name: api
    hostname: api
    build: async_api
    environment:
      PROJECT_NAME: ${PROJECT_NAME}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      LOG_LEVEL_LOGGERS: ${LOG_LEVEL_LOGGERS}
      LOG_LEVEL_ROOT: ${LOG_LEVEL_ROOT}
    networks:
      - network
    expose:
      - "8000"
    depends_on:
      - etl

  auth:
    container_name: auth
    hostname: auth
    build: auth_service
    environment:
      PROJECT_NAME: ${AUTH_PROJECT_NAME}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      PG_DSN: postgresql+asyncpg://app:123qwe@auth_postgres:5432/auth
      SECRET_KEY: secret
    networks:
      - network
    expose:
      - "8000"
    depends_on:
      - redis
      - postgres

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:1.19.2
    volumes:
      - ./src/nginx.conf:/etc/nginx/nginx.conf
      - ./src/configs:/etc/nginx/conf.d
    depends_on:
      - api
    ports:
      - "80:80"
    networks:
      - network

volumes:
  pgdata:
  auth_data:
  redis_data:
  elasticsearch_data:

networks:
  network: